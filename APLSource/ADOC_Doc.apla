(
 '# Snippets in Dyalog APL'
 ''
 '## 1. What are snippets?'
 ''
 'Snippets can be functions, operators, classes, interfaces, namespace scripts or just pieces of code.'
 ''
 'Snippets are useful objects or pieces of code in circumstances that occur relatively frequently, but do not qualify for becoming a package.'
 ''
 'Take this code, for example: '
 ''
 '```'
 'Assert←{⍺←'''' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}'
 '```'
 ''
 'This certainly does not qualify as a package: there is no need for versioning or documentation, and no dependencies either.'
 ''
 'But this piece of code migth be used frequently enough by you to make it available as a snippet, because this is not something that can be'
 'easily entered on the fly, not to mention the possibility of a typo, making it a perfect example of a snippet.'
 ''
 '## 2. How to create a snippet'
 ''
 'Snippets can be created using the clipboard, which is the recommended way for converting a piece of code rather than a function or an operator '
 'or a script into a snippet. The files used to store such code snippets would have a `.code` extension.'
 ''
 'You copy the piece of code to the clipboard and then execute the `]Snippets.Save` command without an argument. You may use the `-name=` option '
 'to define a name for the file about to be created, otherwise you will be asked for a name.'
 ''
 'You can also create a snippet from an object in the workspace. These would be saved in files with the usual extensions depending on'
 'the type of object: `.aplf` for functions, `.aplo` for operators, `.aplc` for classes, `.apli` for interfaces and `.apln` for'
 'namespace scripts.'
 ''
 'The name defaults to the name of the APL object, but you can specify a different one with the -name= option.'
 ''
 '## 3. How to get a snippet into the workspace                 '
 ''
 'There are several ways for bringing snippets into the workspace:'
 ''
 '* APL objects can be fixed (does not apply for code snippets)'
 '* You can copy APL objects or code to the clipboard and insert it somewhere '
 ''
 '### Fixing'
 ''
 'With `]Snippets.Fix` you can fix an object in the workspace'
 ''
 '* It can be called without an argument. In this case all snippets are listed, and the user can select one to fix.'
 ''
 '* It can be called with an argument that carries as trailing asterisk. In this case all matchinh snippets will be listed, '
 '  and the user can select one to fix.'
 '  '
 '  Note that the search is not case-sensitive.'
 '  '
 '* It can be provided with an argument without a trailing asterisk. In this case only a snippet with exactly the given name will be found'
 ''
 '  Note that the search is not case sensitive.'
 ''
 'If you are not in `#` when the user command is issued, you will be asked whether you want to fix the object in `#` or in the namespace you'
 'are currently in.'
 ''
 '### Clipboard'
 ''
 'Copying any snippet to the clipboard with the `]Snippets.Copy` command is only supported on Windows. '
 ''
 'However, you can get around this on other platforms by using the command `]Snippets.Show` and copy the code "manually" from the session. '
 '`Show` offers also an `-edit` flag that can be useful in this context.'
)
