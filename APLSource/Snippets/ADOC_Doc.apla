(
 '# Snippets in Dyalog APL'
 ''
 ''
 '## 1. What are snippets?'
 ''
 'Snippets can be functions, operators, classes, interfaces, namespace scripts or just pieces of code. A snippet can also be a variables,'
 'though this makes only sense for simple character vectors, vectors of simple character vectors and simple character matrices.'
 ''
 'Snippets are useful objects or pieces of code in circumstances that occur relatively frequently, but do not qualify for becoming a package.'
 ''
 'Take this code, for example: '
 ''
 '```'
 'Assert←{⍺←'''' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}'
 '```'
 ''
 'This certainly does not qualify as a package: there is no need for versioning or documentation, and no dependencies either.'
 ''
 'But this piece of code migth be used frequently enough by you to make it available as a snippet, because this is not something that can be'
 'easily entered on the fly, not to mention the possibility of a typo, making it a perfect example of a snippet.'
 ''
 'Another exampe is this variable which is a vector of character vectors:'
 ''
 '```'
 'MIT License                                                                                                                                                             '
 '                                                                                                                                                                         '
 ' Copyright (c) Kai Jaeger                                                                                                                                                '
 '                                                                                                                                                                         '
 ' Permission is hereby granted, free of charge, to any person obtaining a copy                                                                                            '
 ' of this software and associated documentation files (the "Software"), to deal                                                                                           '
 ' in the Software without restriction, including without limitation the rights                                                                                            '
 ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                                                                               '
 ' copies of the Software, and to permit persons to whom the Software is                                                                                                   '
 ' furnished to do so, subject to the following conditions:                                                                                                                '
 '                                                                                                                                                                         '
 ' 1. The above copyright notice and this permission notice shall be included in all                                                                                       '
 '    copies or substantial portions of the Software.                                                                                                                      '
 '                                                                                                                                                                         '
 ' 2. The Software is provided "as is", without warranty of any kind, express or                                                                                           '
 '    implied, including but not limited to the warranties of merchantability,                                                                                             '
 '    fitness for a particular purpose, and non-infringement. In no event shall the                                                                                        '
 '    authors or copyright holders be liable for any claim, damages or other                                                                                               '
 '    liability, whether in an action of contract, tort, or otherwise, arising from,                                                                                       '
 '    out of, or in connection with the Software or the use or other dealings in the                                                                                       '
 '    Software.                                                                                                                                                            '
 '```'
 ''
 'If you add this frequently to your projects it might be a good idea to save it as a snippet.'
 ''
 '## 2. How to create a snippet'
 ''
 'Snippets can be created using the clipboard, which is the recommended way for converting a piece of code as well as character variables into '
 'a snippet. A file used to store such a code snippet would have a `.code` extension.'
 ''
 'You copy the piece of code (or the variable) to the clipboard and then execute the `]Snippets.Save` command without an argument. '
 'You can use the `-name=` option to define a name for the file about to be created, otherwise you will be asked for a name.'
 ''
 'You can also create a snippet from an object in the workspace. These would be saved in files with the usual extensions depending on'
 'the type of object: `.aplf` for functions, `.aplo` for operators, `.aplc` for classes, `.apli` for interfaces, `.apln` for'
 'namespace scripts and `.apla` for variables.'
 ''
 'The name of the snippet defaults to the name of the APL object, but you can specify a different one with the -name= option.'
 '          '
 ''
 '## 3. How to get a snippet into the workspace                 '
 ''
 'There are several ways for bringing snippets into the workspace:'
 ''
 '* APL objects can be fixed (does not apply for code snippets)'
 '* You can copy APL objects or code or variables to the clipboard and insert it somewhere '
 '                                               '
 ''
 '### Fixing'
 ''
 'With `]Snippets.Fix` you can fix an object in the workspace'
 ''
 '* It can be called without an argument. In this case all snippets are listed, and the user can select one to fix.'
 ''
 '* It can be called with an argument that carries as trailing asterisk. In this case all matching snippets will be listed, '
 '  and the user can select one to fix.'
 '  '
 '  Note that the search is not case-sensitive.'
 '  '
 '* It can be provided with an argument without a trailing asterisk. In this case only a snippet with the given name will be found.'
 ''
 '  Note that the search is not case sensitive.'
 ''
 'If you are not in `#` when the user command is issued, you will be asked whether you want to fix the object in `#` or in the namespace you'
 'are currently in.'
 ''
 ''
 '### Clipboard'
 ''
 'Copying any snippet to the clipboard with the `]Snippets.Copy` command is only supported on Windows. '
 ''
 'However, you can get around this on other platforms by using the command `]Snippets.View` and then copy the code (or variable) "manually". '
)
